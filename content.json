{"meta":{"title":"KpLearner","subtitle":null,"description":null,"author":"AnHui","url":"https://huianyi.github.io"},"pages":[],"posts":[{"title":"数据挖掘导论","slug":"数据挖掘导论","date":"2016-03-15T00:41:00.000Z","updated":"2018-02-07T05:51:47.458Z","comments":true,"path":"2016/03/15/数据挖掘导论/","link":"","permalink":"https://huianyi.github.io/2016/03/15/数据挖掘导论/","excerpt":"","text":"四中主要的数据挖掘任务： 聚类分析 预测分析 关联分析 异常检测 第二章：数据数据集的特性： 维度：数据预处理主要目的就是降低维度（防止维灾难）维归约 稀疏度 分辨率：主要是时间刻度 数据挖掘着眼于两个方面 对数据质量问题进行检测和纠正 研究可以容忍低质量数据的算法 数据预处理 聚集：将两个或多个对象合并成一个对象——对象或属性群之间的行为通常比单个对象更稳定 抽样：注意选定合适的样本容量（可以通过渐进抽样的方法），以及由于属性之间的关系选择分层抽样，使用聚类等方法 维归约：减少属性值，从而降低数据挖掘对内存和时间复杂度上的需求：维归约的线性代数技术——主成分分析/奇异值分解 特征子集选择：嵌入/过滤/包装方法特征子集选择体系结构如下图所示： 特征创建 特征提取 映射数据到新的空间：小波变换、傅里叶变换 特征构造 离散化和二元化：二元化常用的方法（P49），非监督离散化——等宽、等频率、等深；监督离散化——利用熵来进行判断；具有过多值的分类属性——可以采用离散化的方法，也可以根据数据的特征进行大类的划并（如工程学系、社会科学系） 变量变换：简单函数变化；规范化和标准化（利用中值取代均值，绝对标准差取代标准差 相似性和相异性的度量 相似度常取值为0到1，而相异度则有时在0到1，有时会大于1 简单属性的相似性和相异性测量 标称属性只携带了对象的相异性信息 具有单个标称属性的对象之间的相异性完全可以根据标称属性判断 对于具有单个序数对象的属性，就要对序数进行量化，常见的定义序数属性邻近度的标准方法是1,2,3,4… 区间或比率属性相异度测量的方法是属性值相减的绝对值，一般说来，区间或比率的相似度常转化为相异度进行测量 如图： 数据对象之间的相似度和相异度 欧几里得距离为 $d(x,y)=\\sqrt{\\sum\\limits_{k=1}^n(x_k-y_k)^2}$,这个式子可以由下式推广： d(x,y)=\\left(\\sum_{k=1}^n|x_k-y_k|^r\\right)^{\\frac1r}\\text(闵可夫斯基距离)注意： $r$是参数，不要和属性个数进行混淆 当$r\\rightarrow\\infty$时，可以得出距离L的最大值$L_\\infty$ L_{max}=\\lim_{r\\rightarrow\\infty}\\left(\\sum_{k=1}^n|x_k-y_k|^r\\right)^{\\frac1r} 距离具有如下属性： 非负性 对称性 三角不等式性：对于$x、y、z$,有$d(x,z)\\leq d(x,y)+d(y,z)$满足上边属性的称为度量 遇到有些非度量的，就无法使用距离公式，一般要根据具体情境考虑，如集合差、时间 数据之间的相似度见P58 邻近性度量的例子 二元数据的相似性度量 简单匹配系数(SMC)f_{00}表示x与y属性都为0的个数； f_{01}表示x为0y为1的个数； f_{10}、f_{11}依次同上则有：SMC=\\frac {f_{00}+f_{11}}{f_{00}+f_{11}+f_{01}+f_{10}} Jaccard系数，排除了SMC方法0过多时导致所有属性都是相似的问题：J=\\frac {f_{11}}{f_{10}+f_{01}+f_{11}} 非二元属性的相似性度量 余弦相似度不仅忽略了0过多的问题，而且考虑了非二元属性，常用语文档相似度分析，如果x和y表示两个文档属性，则有： \\cos(x,y)=\\frac {x \\cdot y}{||x||||y||}其中$||x||=\\sqrt{\\sum\\limits{k=1}^nx_k^2}$、$x\\cdot y=\\sum{k=1}^nx_ky_k$ 广义Jaccard系数 EJ(x,y)=\\frac {x\\cdot y}{||x||^2+||y||^2-x\\cdot y} 相关性：两个具有二元属性或连续变量的数据对象之间的相关性就是对象属性之间线性联系的度量，更准确的说就是皮尔森相关系数，如下：corr(x,y)=\\frac {S_{xy}}{S_xS_y}S_{xy}=\\frac 1{n-1}\\sum_{k=1}^n(x_k-\\bar x)(y_k-\\bar y)S_x=\\sqrt{\\frac 1{n-1}\\sum_{k=1}^n(x_k-\\bar x)^2}$S_y$同理 Bregman散度 邻近度计算的相关问题 属性值域不同或者之间有相关性Mahalanobis距离：常用来计算有相关性的属性之间的距离：Mahalanobis(x,y)=(x-y)\\sum\\nolimits^{-1}(x-y)^T其中$\\sum\\nolimits^{-1}$表示向量x和y的协方差矩阵的逆，协方差矩阵指的是第$ij$个元素满足$x_i$和$y_j$属性的协方差值域不同时通过标准化使用欧几里得距离就好 数据对象之间属性的数据类型不相同时： 使用权值similarity(x,y)=\\frac {\\sum_{k=1}^nw_k\\delta_ks_k(x,y)}{\\sum_{k=1}^n\\delta_k}d(x,y)=\\left(\\sum_{k=1}^nw_k\\left|x-y\\right|^r\\right)^\\frac 1r其中$w_k$的权值和为1。 选取度量时的常用方法 对于稠密、连续的数据通常使用距离 稀疏数据，常常进行忽略0-0这些属性的方法，这反映了如下事实，相似度通常依赖于他们所共有的性质项目，而不是依赖于他们所缺失的项目 考虑数据的时间延迟，为了得到合适的数据相似度度量，常常进行数据的基本处理 第三章：探索数据 数据探索，对数据进行初步研究，以便更好地理解它的特殊性质。数据探索有助于选择合适的数据预处理和数据分析技术。他甚至可以处理一些通常有数据挖掘解决的问题，例如，有时可以通过对数据直接检查发现模式，此外，数据探索中使用的某些技术可以用于理解和解释数据挖掘结果。 截断均值：指定0~100之间的百分位数p，丢弃高端和低端$\\frac p2$%的数据，然后再取均值 Rt=\\frac{invest\\_total}{income\\times market\\_in\\ age}","categories":[{"name":"笔记","slug":"笔记","permalink":"https://huianyi.github.io/categories/笔记/"}],"tags":[{"name":"数据挖掘","slug":"数据挖掘","permalink":"https://huianyi.github.io/tags/数据挖掘/"}]},{"title":"LaTeX公式的使用教程","slug":"LaTeX公式的使用教程","date":"2015-11-08T02:17:00.000Z","updated":"2018-02-07T05:51:48.898Z","comments":true,"path":"2015/11/08/LaTeX公式的使用教程/","link":"","permalink":"https://huianyi.github.io/2015/11/08/LaTeX公式的使用教程/","excerpt":"","text":"本文从math.stackexchange.com上名为MathJax basic tutorial and quick reference的问题翻译而来，并有所改动。主要讲述了如何使用Latex语法。 公式 $$表示独自成为一个段落 $表示为行间 希腊字母 名称 大写 Tex 小写 Tex alpha A A α \\alpha beta B B β \\beta gamma Γ \\Gamma γ \\gamma delta Δ \\Delta δ \\delta epsilon E E ϵ \\epsilon zeta Z Z ζ \\zeta eta H H η \\eta theta Θ \\Theta θ \\theta iota I I ι \\iota kappa K K κ \\kappa lambda Λ \\Lambda λ \\lambda mu M M μ \\mu nu N N ν \\nu xi Ξ \\Xi ξ \\xi omicron O O ο \\omicron pi Π \\Pi π \\pi rho P P ρ \\rho sigma Σ \\Sigma σ \\sigma tau T T τ \\tau upsilon Υ \\Upsilon υ \\upsilon phi Φ \\Phi ϕ \\phi chi X X χ \\chi psi Ψ \\Psi ψ \\psi omega Ω \\Omega ω \\omega 上标和下标 _表下标 ^表示上标 块间使用{} 小括号和中括号使用原始的就好 注意使用\\{表示大括号 上取整：使用\\lceil 和 \\rceil 表示 如$\\lceil x \\rceil$ 下取整：使用\\rfloor 和\\lfloor 表示 如$\\lfloor x \\rfloor$注意： 中间要有空格 不可见括号：使用.表示 原始符号并不会随着公式大小缩放，因此要使用\\left(...\\right)表示比如: \\lbrace\\sum_{i=0}^n i^2 = >\\frac{(n^2+n)(2n+1)}{6}\\rbrace就可以改为： \\left \\lbrace \\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6}\\right\\rbrace 求和与积分\\sum用来表示求和符号，其下标表示求和下限，上标表示上限。如:$\\sum_1^n$。 \\int用来表示积分符号，同样地，其上下标表示积分的上下限。如，$\\int_1^\\infty$ 与此类似的符号还有，\\prod：∏，\\bigcup:⋃，\\bigcap：⋂，\\iiint:$\\iiint$ 分式与根式分式可以用\\frac表示，比如$\\frac ab$,根式使用\\sqrt[数字]表示，比如：$\\sqrt\\frac ab$ 字体 使用\\mathbb或\\Bbb显示黑板粗体字，此字体经常用来表示代表实数、整数、有理数、复数的大写字母。如：$\\mathbb CHNQRZ$、$\\Bbb CHNQRZ$。 使用\\mathbf显示黑体字，如： $\\mathbf anbcedfghig$。 使用\\mathtt显示打印机字体，如： $\\mathtt andfjdsaf$。 使用\\mathrm显示罗马字体，如，$\\mathrm wxyz$。 使用\\mathscr显示手写体，如，$\\mathscr dfjalsfa$。 使用\\mathfrak显示Fraktur字母（一种德国字体），如: $\\mathfrak dfasfasf$ 特殊符号和函数 常见的三角函数，求极限符号可直接使用\\+缩写即可。如:$\\sin x$ $ \\lim_{1\\to\\infty}$ 比较运算符\\lt \\gt \\le ge \\neq,如: $a\\lt b$ $a\\gt c$ $a \\le b$ $a \\ge c$ $a\\neq b$,若需要不等号，则只需加上\\not即可，如： $\\not\\lt$ \\times \\div \\pm \\mp表示：$\\times$ $\\div$ $\\pm$ $\\mp$，\\cdot表示居中的点，x \\cdot y :$x \\cdot y$。 集合关系与运算：\\cup \\cap \\setminus \\subset \\subseteq \\subsetneq \\supset \\in \\notin \\emptyset \\varnothing ：$\\cup$ $\\cap$ $\\setminus$ $\\subset$ $\\subseteq$ $\\subsetneq$ $\\supset$ $\\in$ $\\notin$ $\\emptyset$ $\\varnothing$ 表示排列使用{n+1 \\choose 2k} 或 \\binom{n+1}{2k}，$\\binom{n+1}{2k}$ 箭头：\\to \\rightarrow \\leftarrow \\Rightarrow \\Leftarrow \\mapsto : $\\to\\rightarrow\\leftarrow\\Rightarrow\\Leftarrow\\mapsto$ 逻辑运算符：\\land \\lor \\lnot \\forall \\exists \\top \\bot \\vdash \\vDash $\\land \\lor \\lnot \\forall \\exists \\top \\bot \\vdash \\vDash$ \\star \\ast \\oplus \\circ \\bullet :$\\star \\ast \\oplus \\circ \\bullet $ \\approx \\sim \\cong \\equiv \\prec:$\\approx \\sim \\cong \\equiv \\prec$ \\infty \\aleph_0: $\\infty \\aleph_0$ \\nabla \\partial: $ \\nabla \\partial$ \\Im \\Re: $\\Im \\Re$ 模运算 \\pmod: $a\\equiv b\\pmod n$ \\ldots与\\cdots，其区别是dots的位置不同，ldots位置稍低，cdots位置居中:$a+b+c+\\cdots+z$,$a,b,c,d,\\ldots,z$ 一些希腊字母具有变体形式，如 \\epsilon \\varepsilon:$\\epsilon$ $\\varepsilon$ 空间通常MathJax通过内部策略自己管理公式内部的空间，因此ab与a b（.表示空格）都会显示为ab。可以通过在ab间加入\\,增加些许间隙，\\;增加较宽的间隙，\\quad 与 \\qquad 会增加更大的间隙，如，$a\\ b$(注意\\后边跟上字母也得加空格) $a\\; b$ $a\\quad b$。 顶部符号对于单字符，\\hat:$\\hat b$,多字符\\widehat:$\\widehat {ab}$,类似的还有:\\overline,\\vec,\\overrightarrow,\\dot \\ddot:$\\overline {abc}\\ \\vec {av}$(只能输两个)$\\overrightarrow {adc}\\ \\dot d$(只能输一个) $\\ddot a$(只能输一个) 结束基础部分就是这些。需要注意的是一些MathJax使用的特殊字符，可以使用\\转义为原来的含义。如\\$表示$，\\_表示下划线. 表格使用$$\\begin{array}{列样式}…\\end{array}$$这样的形式来创建表格，列样式可以是c表示居中，l左，r右对齐，还可以使用|表示一条竖线。表格中 各行使用\\\\分隔，各列使用&amp;分隔。使用\\hline在本行前加入一条直线。 例如， 1$$ \\begin&#123;array&#125;&#123;c|lcr&#125; n &amp; \\text&#123;Left&#125; &amp; \\text&#123;Center&#125; &amp; \\text&#123;Right&#125; \\\\ \\hline 1 &amp; 0.24 &amp; 1 &amp; 125 \\\\ 2 &amp; -1 &amp; 189 &amp; -8 \\\\ 3 &amp; -20 &amp; 2000 &amp; 1+10i \\\\ \\end&#123;array&#125; $$ 结果: \\begin{array}{c|lcr} n & \\text{Left} & \\text{Center} & \\text{Right} \\\\1 & 0.24 & 1 & 125 \\\\ 2 & -1 & 189 & -8 \\\\ 3 & -20 & 2000 & 1+10i \\\\ \\end{array}更复杂的有： \\begin{array}{c}\\begin{array}{cc}\\begin{array}{c|cccc}\\text{min} & 0 & 1 & 2 & 3\\\\\\hline 0 & 0 & 0 & 0 & 0\\\\1 & 0 & 1 & 1 & 1\\\\2 & 0 & 1 & 2 & 2\\\\3 & 0 & 1 & 2 & 3\\end{array}&\\begin{array}{c|cccc}\\text{max}&0&1&2&3\\\\\\hline0 & 0 & 1 & 2 & 3\\\\1 & 1 & 1 & 2 & 3\\\\2 & 2 & 2 & 2 & 3\\\\3 & 3 & 3 & 3 & 3\\end{array}\\end{array}\\\\\\begin{array}{c|cccc}\\Delta&0&1&2&3\\\\\\hline0 & 0 & 1 & 2 & 3\\\\1 & 1 & 0 & 1 & 2\\\\2 & 2 & 1 & 0 & 1\\\\3 & 3 & 2 & 1 & 0\\end{array}\\end{array}矩阵基本用法使用$$\\begin{matrix}…\\end{matrix}$$这样的形式来表示矩阵，在\\begin与\\end之间加入矩阵中的元素即可。矩阵的行之间使用\\\\分隔，列之间使用&amp;分隔。 例如 $$ \\begin{matrix} 1 &amp; x &amp; x^2 \\\\ 1 &amp; y &amp; y^2 \\\\ 1 &amp; z &amp; z^2 \\\\ \\end{matrix} $$ 结果： \\begin{matrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{matrix}加括号如果要对矩阵加括号，可以像上文中提到的一样，使用\\left与\\right配合表示括号符号。也可以使用特殊的matrix。即替换\\begin{matrix}…\\end{matrix}中的matrix为pmatrix，bmatrix，Bmatrix，vmatrix , Vmatrix.如： pmatrix:$\\begin{pmatrix} 1 &amp; x &amp; x^2 \\ 1 &amp; y &amp; y^2 \\ 1 &amp; z &amp; z^2 \\ \\end{pmatrix}$,bmatrix:$\\begin{bmatrix} 1 &amp; x &amp; x^2 \\ 1 &amp; y &amp; y^2 \\ 1 &amp; z &amp; z^2 \\ \\end{bmatrix}$,Bmatrix:$\\begin{Bmatrix} 1 &amp; x &amp; x^2 \\ 1 &amp; y &amp; y^2 \\ 1 &amp; z &amp; z^2 \\ \\end{Bmatrix}$,vmatrix：vmatrix$\\begin{vmatrix} 1 &amp; x &amp; x^2 \\ 1 &amp; y &amp; y^2 \\ 1 &amp; z &amp; z^2 \\ \\end{vmatrix}$,Vmatrix：$\\begin{Vmatrix}1&amp;2\\3&amp;4\\ \\end{Vmatrix}$(这里有问题，需验证) 省略元素可以使用\\cdots $\\cdots$ \\ddots $\\ddots$ \\vdots $\\vdots$ 来省略矩阵中的元素，如 \\begin{pmatrix} 1 & a_1 & a_1^2 & \\cdots & a_1^n \\\\1 & a_2 & a_2^2 & \\cdots & a_2^n \\\\ \\vdots & \\vdots& \\vdots & \\ddots & \\vdots \\\\ 1 & a_m & a_m^2 & \\cdots & a_m^n\\end{pmatrix}增广矩阵增广矩阵需要使用前面的array来实现，如 $$ \\left[ \\begin{array}{cc|c} 1&amp;2&amp;3\\\\ 4&amp;5&amp;6 \\end{array} \\right] $$ 结果 \\left[ \\begin{array}{cc|c} 1&2&3\\\\ 4&5&6 \\end{array} \\right]对齐的公式有时候可能需要一系列的公式中等号对齐，如： \\begin{align}\\sqrt{37}&=\\sqrt{\\frac{73^2-1}{12^2}}\\\\&=\\sqrt{\\frac{73^2}{12^2}\\cdot\\frac{73^2-1}{73^2}} \\\\ & = \\sqrt{\\frac{73^2}{12^2}}\\sqrt{\\frac{73^2-1}{73^2}} \\\\ & = \\frac{73}{12}\\sqrt{1 - \\frac{1}{73^2}} \\\\ & \\approx \\frac{73}{12}\\left(1 - \\frac{1}{2\\cdot73^2}\\right)\\end{align}公式如下： \\begin{align}\\sqrt{37} &amp; = \\sqrt{\\frac{73^2-1}{12^2}} \\\\ &amp; = \\sqrt{\\frac{73^2}{12^2}\\cdot\\frac{73^2-1}{73^2}} \\\\ &amp; = \\sqrt{\\frac{73^2}{12^2}}\\sqrt{\\frac{73^2-1}{73^2}} \\\\ &amp; = \\frac{73}{12}\\sqrt{1 - \\frac{1}{73^2}} \\\\ &amp; \\approx \\frac{73}{12}\\left(1 - \\frac{1}{2\\cdot73^2}\\right) \\end{align} 分类表达式定义函数的时候经常需要分情况给出表达式，可使用\\begin{cases}…\\end{cases}。其中，使用\\来分类，使用&amp;指示需要对齐的位置。如: f(n) =\\begin{cases}n/2, &amp; \\text{if $n$ is even} \\\\3n+1, &amp; \\text{if $n$ is odd} \\\\\\end{cases} f(n)=\\begin{cases}n/2,&\\text{if $n$ is even} \\\\3n+1, & \\text{if $n$ is odd}\\\\\\end{cases}括号移到右边(用array实现) \\left.\\begin{array}{l}\\text{if $n$ is even:}&amp;n/2\\\\\\text{if $n$is odd:}&amp;3n+1\\end{array}\\right\\}=f(n) \\left.\\begin{array}{l}\\text{if $n$ is even:}&n/2\\\\\\text{if $n$ is odd:}&3n+1\\end{array}\\right\\}=f(n)最后，如果想分类之间的垂直间隔变大，可以使用\\[2ex]代替\\来分隔不同的情况。(3ex,4ex也可以用，1ex相当于原始距离） 注意事项详见：markdown教程","categories":[{"name":"教程","slug":"教程","permalink":"https://huianyi.github.io/categories/教程/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://huianyi.github.io/tags/教程/"},{"name":"LaTex","slug":"LaTex","permalink":"https://huianyi.github.io/tags/LaTex/"}]},{"title":"markdown-tutorial","slug":"markdown-tutorial","date":"2015-11-07T13:40:00.000Z","updated":"2018-02-07T05:51:59.391Z","comments":true,"path":"2015/11/07/markdown-tutorial/","link":"","permalink":"https://huianyi.github.io/2015/11/07/markdown-tutorial/","excerpt":"","text":"这是一个一号标题这是一个二号标题这是一个三号标题这是一个四好标题这是一个五号标题这是一个六号标题1234567891011# 这是一个一号标题## 这是一个二号标题### 这是一个三号标题#### 这是一个四好标题##### 这是一个五号标题###### 这是一个六号标题 无序列表1 无序列表2 无序列表3 有序列表1 有序列表2 有序列表3 1234567- 无序列表1- 无序列表2- 无序列表31. 有序列表12. 有序列表23. 有序列表3 baidu 12[baidu](http://www.baidu.com)![笔记](https://raw.githubusercontent.com/huianyi/-markdown-png/master/datamining.jpg) 这是一个引用要不再来一次注意要保留一个空格 123&gt; 这是一个引用&gt; 要不再来一次&gt; 注意要保留一个空格 注意如果想让引用保留另起一段的格式，可用如下方式：可以多加一行空格 123456&gt; 这是一个引用&gt;&gt; 要不再来一次&gt;&gt; 注意要保留一个空格&gt; 效果： 这是一个引用 要不再来一次 注意要保留一个空格 一个``为斜体* 两个``为粗体** 注意： 要引用诸如*在文本中，可以使用\\进行转义 表格：| Tables | Are | Cool ||:———————-:|:———————-|———-|| col 3 is | right-aligned | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 | 12345| Tables | Are | Cool ||:---------------:|:---------------|-------|| col 3 is | right-aligned | \\$1600 || col 2 is | centered | \\$12 || zebra stripes | are neat | \\$1 | 在文章中使用代码时，用```代码名表示，结束用``` ,可在末尾增加代码名。 规范注意两点： 别乱加空格、空行 一般不同类型的之间有一个空行 官方规范地址：mdRules","categories":[{"name":"教程","slug":"教程","permalink":"https://huianyi.github.io/categories/教程/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://huianyi.github.io/tags/markdown/"},{"name":"tutorial","slug":"tutorial","permalink":"https://huianyi.github.io/tags/tutorial/"}]}]}